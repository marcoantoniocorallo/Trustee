// Type System prevents data leakage

let trust pwd = {
  let secret pass = "abcd" in 

  let fun checkpwd (guess : string) : bool = 
    pass = guess in
  handle: {checkpwd}
} in
let filter = include <filter> in
filter pwd.checkpwd ["pippo", "abc", "abcd", "pluto", "paperino"]


(*
let trust pwd = {
  let secret pass = "abcd" in 

  let fun checkpwd (guess : string) : bool = 
    pass = guess in
  handle: {checkpwd}
} in
let filter = include <filter> in
if (let _ = (filter (pwd.checkpwd) ["pippo", "abc", "abcd", "pluto", "paperino"]) in true) 
  then print_string "hello" 
else print_string "hi"
*)

(*
// try to print 
let trust pwd = {
  let secret pass = "abcd" in 

  let fun checkpwd (guess : string) : bool = 
    pass = guess in
  handle: {checkpwd}
} in
let filter = include <filter> in
let l = filter pwd.checkpwd ["pippo", "abc", "abcd", "pluto", "paperino"] in 
let fun print_list (ls : string list) : unit = 
  if ls <> [] then 
    let _ = print_string (hd ls) in 
    print_list (tl ls)
  else print_string "finished"
in print_list l
*)

(*
// In a version without confidential data, it provides pass but alert a possible tainted value
let trust pwd = {
  let pass = "abcd" in 

  let fun checkpwd (guess : string) : bool = 
    pass = guess in
  handle: {checkpwd}
} in

let filter = include <filter> in
filter pwd.checkpwd ["pippo", "abc", "abcd", "pluto", "paperino"]
*)