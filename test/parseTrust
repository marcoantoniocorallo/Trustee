(*
let trust pwd = {
    let secret pass = "abcd";
    let fun checkpwd (guess : string) : bool = pass = guess;
    handle: {checkpwd}
} in pwd
*)

(* Failure ! checkpw is not declared *)
(*
let trust pwd = {
    let secret pass = "abcd";
    let fun checkpwd (guess : string) : bool = pass = guess;
    handle: {checkpw}
} in pwd
*)

(*
(* FAILURE !!! Handle accepts only fn names *)
let trust pwd = {
    let secret pass = "abcd";
    let id = "pippo";
    let fun checkpwd (guess : string) : bool = pass = guess;
    handle: {checkpwd; (let x = "pippo" in x); [1, 2, 3]}
} in pwd
*)

(* (* FAILURE !!! NO NESTED BLOCKS *)
let trust pwd = {
  let trust deeper = {
    let secret pass = "abcd";

    let fun checkpwd (guess : string) : bool = password = guess;
    handle: {checkpwd; (let x = "pippo" in x); [1, 2, 3]}   
  };
  handle: {[1,2]}
} in pwd
*)

(* (* FAILURE !!! NO NESTED BLOCKS *)
let trust pwd = {
  let e = 
    let f = 
      let trust deeper = {
        let secret pass = "abcd";

        let fun checkpwd (guess : string) : bool = password = guess;
        handle: {checkpwd; (let x = "pippo" in x); [1, 2, 3]}   
      } in f 
    in e;
  handle: {[1,2]}
} in pwd
*)

(*
(* FAILURE !!! Only data can be secret *)
let trust pwd = {
  let secret pass = "abcd";

  let secret fun checkpwd (guess : string) : bool = pass = guess;
  handle: {[1,2]}
} in pwd
*)

(*
(* Failure! only fn names in handle *)
let trust pwd = {
  let secret pass = "abcd";

  let fun checkpwd (guess : string) : bool = pass = guess;
  handle: {pass}
} in pwd
*)

(* 
(* Failure! Handled Functions must be declared inside the block *)
let fun f (x : int) : int = x + 1 in 
let trust pwd = {
  let secret pass = "abcd";

  let fun checkpwd (guess : string) : bool = pass = guess;
  handle: {f}
} in pwd
*)

let trust pwd = {
  let secret pass = "abcd";

  let fun checkpwd (guess : string) : bool = pass = guess;
  handle: {checkpwd}
} in pwd