(*
let trust pwd = {
    let secret pass = "abcd" in 
    let fun checkpwd (guess : string) : bool = pass = guess in 
    handle: {checkpwd}
} in pwd
*)

(* Failure ! checkpw is not declared *)
(*
let trust pwd = {
    let secret pass = "abcd" in 
    let fun checkpwd (guess : string) : bool = pass = guess in 
    handle: {checkpw}
} in pwd
*)

(*
(* FAILURE !!! Handle accepts only fn names *)
let trust pwd = {
    let secret pass = "abcd" in 
    let id = "pippo" in 
    let fun checkpwd (guess : string) : bool = pass = guess in 
    handle: {checkpwd; (let x = "pippo" in x); [1, 2, 3]}
} in pwd
*)

(* (* FAILURE !!! NO NESTED BLOCKS *)
let trust pwd = {
  let trust deeper = {
    let secret pass = "abcd" in 

    let fun checkpwd (guess : string) : bool = password = guess in 
    handle: {checkpwd; (let x = "pippo" in x); [1, 2, 3]}   
  } in 
  handle: {[1,2]}
} in pwd
*)

(* (* FAILURE !!! NO NESTED BLOCKS *)
let trust pwd = {
  let e = 
    let f = 
      let trust deeper = {
        let secret pass = "abcd" in 

        let fun checkpwd (guess : string) : bool = password = guess in 
        handle: {checkpwd; (let x = "pippo" in x); [1, 2, 3]}   
      } in f 
    in e in 
  handle: {[1,2]}
} in pwd
*)

(*
(* FAILURE !!! Only data can be secret *)
let trust pwd = {
  let secret pass = "abcd" in 

  let secret fun checkpwd (guess : string) : bool = pass = guess in 
  handle: {[1,2]}
} in pwd
*)

(*
(* Failure! only fn names in handle *)
let trust pwd = {
  let secret pass = "abcd" in 

  let fun checkpwd (guess : string) : bool = pass = guess in 
  handle: {pass}
} in pwd
*)

(* 
(* Failure! Handled Functions must be declared inside the block *)
let fun f (x : int) : int = x + 1 in 
let trust pwd = {
  let secret pass = "abcd" in 

  let fun checkpwd (guess : string) : bool = pass = guess in 
  handle: {f}
} in pwd
*)

(* Failure! An identifier was expected *)
(*
let fun f (x : int) : int = x + 1 in
let trust pwd = {
  let secret pass = "abcd" in 

  let fun checkpwd (guess : string) : bool = pass = guess in
  handle: {(lambda : (string -> bool) -> checkpwd)}
} in pwd
*)

(* Syntax error (handle expected) *)
(*
let fun f (x : int) : int = x + 1 in 
let trust pwd = {
  let secret pass = "abcd" in

  let fun checkpwd (guess : string) : bool = pass = guess in
} in pwd
*)

(*
let trust pwd = {
  let secret pass = "abcd" in 

  let fun checkpwd (guess : string) : bool = pass = guess in 
  handle: {checkpwd}
} in pwd.checkpwd
*)

(* plugin in a trust block is not recognized *)
(*
let trust pwd = {
  let secret pass = "abcd" in 
  let plugin p = { let s="s" } in 
  let fun checkpwd (guess : string) : bool = pass = guess in 
  handle: {checkpwd}
} in pwd.checkpwd
*)

(* Again nested blocks *)
(*
let trust pwd = {
  let secret pass = "abcd" in 
  let pippo = "hello" in 
    let pluto = "world" in 
      let fun f (x : int) : int = x+1 in 
        let plugin p = { let s="s" } in 
  let xx = pippo^pluto in 
  let fun checkpwd (guess : string) : bool = pass = guess in 
  handle: {checkpwd}
} in pwd.checkpwd
*)