- All'interno dei trusted blocks è possibile utilizzare let expressions e handle.
  Avrei potuto utilizzare una nuova categoria sintattica nel parser per evitare la possibilità
  di dichiarare nested trusted blocks già nel front-end, ma avrei potuto comunque definire roba del tipo
  let data = let trust { ... } in 
  Il front-end avrebbe eliminato il problema in superficie, ma all'interno di espressioni avrei
  comunque il problema. Quindi ho preferito avere categorie sintattiche più semplici (e in minor numero)
  e gestirlo durante la fase di type checking

- la keyword "secret" è invece utilizzabile solo all'interno di un blocco trust

- Ogni dichiarazione (Let ... ) all'interno di un blocco trusted è privata by-default;
  Le funzioni all'interno di un costrutto Handle vengono poi ri-aggiunte all'ambiente con qualificatore
  Public, sfruttando lo shadowing

- Solo i dati possono essere dichiarati secret, non le funzioni

- Le funzioni dichiarate all'interno di un blocco handle devono essere già state definite nel blocco
  e devono quindi avere un nome. 
  In particolare, nel blocco handle si possono solo inserire nomi di funzioni, non altre espressioni

- Blocco handle mandatory

- Trusted Block value non-printable (opaque)

- Trusted blocks NON sono cittadini di prima classe! 
  i.e. Non possono essere usati come argomenti di funzioni o restituiti
  Non sarebbe complicato estendere il linguaggio per trattare come first-class citizen i blocchi,
  basterebbe equipaggiarlo di type annotations, definire la relazione di ordinamento tra tipi <=
  in modo pointwise (field-per-field)

- I plugin possono invece essere passati come funzioni o come valori di ritorno, essendo funzioni
  La relazione di ordinamento tra plugin segue quella delle funzioni che wrappano infatti

- mostrare la grammatica del linguaggio e dei blocchi

- I plugin possono essere inclusi, ma per rafforzare l'access control la direttiva include 
  prende solo nomi di files dentro plugin.

- La direttiva include fa dei controlli sulla cartella sorgente del file da includere e 
  sul tipo di espressione parsata: solo la dichiarazione di un plugin può essere parsata!

- Nota: INCLUDE fa preprocessing, parsa il file e lo carica!

- Nella mia visione di plugin, questi sono blocchi di codice (dati + funzioni) inaccessibili.
  Il codice del plugin viene valutato solo tramite apposita chiamata unsafe_eval
  Immagino che quando si scarichi/acquisti un plugin, questo sia corredato da un insieme di informazioni
  plugin filter:
  @provides string_f : (string -> bool) -> string list -> string list 
  di controllare che venga utilizzato correttamente se ne occupa il type checker

- Includere nelle design choices le scelte di valutazione della taintness per ogni espressione

- Se dovesse chiederlo: la DTA è fatta a run-time (e non a type-checking, ammess che si possa) perchè
  le assert lavorano sul run-time, quindi ci interessa avere le informazioni sulla taintness a rt

- I controlli sugli accessi e la visibilità degli attributi secret sono statici:
  nel type checking contrlliamo che dato un blocco trusted, solo funzioni vengano esportate,
  che non si tenti di accedere a variabili secret e che all'interno di blocchi trusted non si acceda
  a plugin.

- Trusted blocks non esegue plugin all'interno

- Il codice plugin NON può accedere a variabili esterne.

- I plugin devono essere valutati come funzioni

- I plugin vengono invocati come normali funzioni, preceduti dalla keyword unsafe.
  Se la keyword non viene utilizzata, il type checker fallisce perchè trova un plugin inatteso.

- Se dovesse chiederlo: quando una funzione taint viene invocata il programma non abortisce.
  Infatti, non potendo modificare la memoria, l'unico tipo di funzione taint sono i plugin

- Information flow: 
  - Assegnamento: l'idea è di propagare senza sollevare eccezione. 
    L'eccezione verrebbe sollevata per la stampa di valori.
    In realtà, essendo un'analisi statica, non va in esecuzione se vi è un data leak

  - IF: approccio conservativo, valuto la join tra la confidenzialità dei due branch,
    messi a loro volta in join con il contesto e la guardia

  - 3 lv di confidenzialità: 
    public, per le funzioni handled;
    private, per dati non-secret e funzioni non-handled;
    secret, per i dati secret;

- Primitive di asserzione "semplici" (su espressioni) e sulla taintness delle espressioni

- Mentre top, bottom, secret_i e plugin sono ordinati in un reticolo, private è utilizzato
  solo per "l'access control" i.e. per non far accedere a membri non-publici dei blocchi

- Si poteva pensare di avere due elementi "secret" e "plugin", senza distinguere tra i vari 
  trusted blocks. Tuttavia, un trusted block che implementa la funzione filter (finora vista dentro
  un plugin) avrebbe costituito ugualmente un problema. Vulnerabilità strutturali (Structural:
  The anomalous behavior arises when several components are integrated ).

Nota: il ricco type system permette di avere a run-time esclusivamente le informazioni sull'integrity

---------------------------------------------------------------------------------------------------

- Rimossa la direttiva INCLUDE: ora un plugin dichiarato nel file "p" può essere incluso con <"p">

- Un controllo statico di correttezza dei tipi viene fatto dal parser in fase di parsing: 
quando si parsa un plugin viene controllato che sia effettivamente un plugin!

- aggiornare dipendenze con ppx_test e ppx_expect

- declassify statement possibile solo dentro i trusted block

- Il reticolo di confidenzialità
            T
      /     |
     /   SecretCombined
    /       |         \
Plugin   Secret_i  Secret_j
   \        |         /
    \    Normal_i  Normal_j
     \       |      /
          Bottom 
  Si spiega in questo modo:
  - Bottom è il livello di confidenzialità iniziale (top-level/main);
  - Top segnala la possibilità di data lekage;
  - Codice non-secret all'interno di un trusted block b avrà confidenzialità Normal_b
  - Codice secret all'interno di un trusted block b avrà confidenzialità Secret_b
  - Se codice normal_b interagisce con secret_b, diventa secret_b
  - Se codice normal_x/secret_x interagisce con normal_y/secret_y, si ottiene SecretCombined
    in questo modo più trusted block (codice verificato) possono interagire tra loro. 
    Nota: niente mi vieta di avere un trusted block che implementa una funzione filter e 
    viene poi applicato al trusted block checkpwd, ricadendo nell'esempio malevolo 
    presentato nel testo dell'homework.
    Tuttavia, in questo caso si parla di codice trusted, conosciuto e fidato dall'utente
    dunque la correttezza/sicurezza del programma dato dalla composizione di più TB è 
    demandata all'utente, che può analizzare i blocchi di codice (a differenza di quanto 
    avviene per i plugin).
    Se questo non fosse possibile,
  - Allo stesso modo, se codice plugin interagisce con un trusted block si ottiene Top 
    => data leak 
  Quindi i blocchi plugin possono essere combinati tra di loro e possono interagire con 
  codice standard, mentre i blocchi trusted possono interagire esclusivamente con 
  codice standard e altri trusted block, ma non possono interagire con plugins;

- Nota: Questo nuovo reticolo permette di bloccare automaticamente (e staticamente)
  l'esecuzione di plugin all'interno di trusted block, qualora questi venissero
  passati come argomenti (infatti non è possibile (vincolo sintattico) definire un 
  plugin all'interno di un tb). Dunque non vi è più l'artificio a run-time che blocca
  il passaggio di plugin come parametri!

  Naturalmente, questo limita un po' l'usabilità del linguaggio dato che la commistione
  di plugin e trusted block, anche quando sarebbe lecita, viene conservativamente trattata
  come potenziale punto di leakage. Si tratta di una scelta progettuale che predilige
  la soundness e la correttezza statica dei programmi all'usabilità, limitazione comunque
  circoscritta a casi particolari.

- Nota: l'interazione tra plugin e trusted blocks con confidenzialità "Normal _" 
  deve dare Top (=> data leak) perchè i blocchi che usano declassify(.) all'interno 
  hanno confidenzialità "Normal _". Permettere questo tipo di interazioni è pericoloso

- Nota: Solo i dati possono essere secret e solo le funzioni possono essere handled

- Plugin e Trusted blocks possono essere passati anche come parametri adesso: first-class 
  citizen! 
  Per passarli bisogna dichiarare il blocco di funzioni pubbliche (handled) con i
  rispettivi tipi, fungendo da "interfaccia" che i parametri attuali devono rispettare.
  In particolare, per passare i trusted blocks bisogna considerare la confidenzialità di 
  ogni funzione. Questa è SECRET by default, ma il programmatore può specificare tramite 
  la kw PUBLIC se una funzione ha confidenzialità Normal.
  In ogni caso, il type system controlla nel momento della chiamata che la confidenzialità
  delle funzioni dichiarate corrisponda!

-------------------------------------------------------------------------------

- Trusted block e plugin sono ora comparabili e viene eseguita una pointer equality.
 In questo modo non vi può essere leak di dati privati se un tb viene comparato a tb diversi.

- Future Works:
  - Generalizzazione ed estensione dei blocchi (=> objects/record types)
  - Blocchi come first-class citizens
  - Programmi formati da più funzioni
  - Pattern Matching
  - Type Inference
  - Per migliorare l'usabilità e l'accuracy del type system, potremmo non trattare
    conservativamente i casi difficili, ma piuttosto demandare la gesitone a run-time 
    (type system ibrido statico-dinamico)
  - Generics
  - REPL
  - definizione di interfacce
  - encryption of secret fieldds

- Non-Interference è rispettata:
  - se si tenta di accedere ad un field secret, o ad un field inesistente, viene restituita
    la stessa eccezione, per non leakare dati;
  - se un "if" effettua controlli su dati segreti, l'IF analysis blocca il programma.
    Questo è un approccio conservativo e aggressivo, ma sound e safe. 
    Questo può essere mitigato tramite l'uso non esagerato della direttiva declassify 

- Nota: Il type-system statico permette, tra le altre cose:
  - Di poter esprimere proprietà sui programmi senza eseguirli
  - Di fare type erasure a run-time
  - Di avere la NI (quasi) senza sforzi (basta gestire i casi di field privati vs field assenti)
  - Di gestire senza sforzi i leakage tramite print 

----------------------------------------------------------------------------------------
FAQ:
1.Hanno senso i controlli nel momento del caricamento di un plugin?
  - Se non controllassimo che: 
    a. I file importati contengano solo e soltanto la definizione di un plugin e 
    b. I file siano all'interno di una cartella conosciuta (plugin),
    un utente malevolo potrebbe scrivere e condividere un plugin
    ```
    let pwd : string = <".../password.txt"> in 
    let plugin evil = {
      // do bad things with pwd // trojan horse
      // do good things
    } ... 
    ```
    in questo modo non si eliminano naturalmente i trojan horse, ma se ne mitigano le 
    possibilità, senza ridurre l'espressività dei plugin in generale.

2.Niente mi vieta di avere un trusted block che implementa una funzione filter e 
    viene poi applicato al trusted block pwd, ricadendo nell'esempio malevolo 
    presentato nel testo dell'homework.
    Tuttavia, in questo caso si parla di codice trusted, conosciuto e fidato dall'utente
    dunque la correttezza/sicurezza del programma dato dalla composizione di più TB è 
    demandata all'utente, che può analizzare i blocchi di codice (a differenza di quanto 
    avviene per i plugin).
    La pericolosità dell'esempio, infatti, non è data dalla funzione filter che è 
    implementabile anche all'interno di un trusted block o di codice standard, ma 
    dall'impossibilità da parte dell'utente di conoscere il codice del plugin.
    In questo senso, un plugin potrebbe implementare una funzione filter "invisibile"
    all'utente, che mandi i dati filtrati all'attaccante e si comporti come un plugin 
    benigno (trojan horse), questa è la vera minaccia dell'esempio e dei plugin.
    Questo non si presenta con i trusted blocks che, invece, sono trasparenti all'utente.

3.Declassify può costituire un problema (vedi NI - 2), ma demanda la responsabilità sul 
  programmatore. Stessa filosofia della FFI di Rust.